{"version":3,"file":"index.umd.js","sources":["../src/lib/constants.ts","../src/Timestamp.ts"],"sourcesContent":["export const second = 1000;\nexport const minute = second * 60;\nexport const hour = minute * 60;\nexport const day = hour * 24;\n\nexport const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const tokens = new Map<string, number>([\n\t['Y', 4],\n\t['Q', 1],\n\t['M', 4],\n\t['D', 4],\n\t['d', 4],\n\t['X', 1],\n\t['x', 1],\n\t['H', 2],\n\t['h', 2],\n\t['a', 1],\n\t['A', 1],\n\t['m', 2],\n\t['s', 2],\n\t['S', 3],\n\t['Z', 2],\n\t['l', 4],\n\t['L', 4],\n\t['T', 1],\n\t['t', 1]\n]);\n","import { day, days, months, second, tokens } from './lib/constants';\n\ninterface TokenResolver {\n\t(time: Date): string;\n}\n\n/* eslint-disable max-len */\nconst tokenResolvers = new Map<string, TokenResolver>([\n\t// Dates\n\t['Y', (time): string => String(time.getFullYear()).slice(2)],\n\t['YY', (time): string => String(time.getFullYear()).slice(2)],\n\t['YYY', (time): string => String(time.getFullYear())],\n\t['YYYY', (time): string => String(time.getFullYear())],\n\t['Q', (time): string => String((time.getMonth() + 1) / 3)],\n\t['M', (time): string => String(time.getMonth() + 1)],\n\t['MM', (time): string => String(time.getMonth() + 1).padStart(2, '0')],\n\t['MMM', (time): string => months[time.getMonth()]],\n\t['MMMM', (time): string => months[time.getMonth()]],\n\t['D', (time): string => String(time.getDate())],\n\t['DD', (time): string => String(time.getDate()).padStart(2, '0')],\n\t['DDD', (time): string => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / day))],\n\t['DDDD', (time): string => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / day))],\n\t[\n\t\t'd',\n\t\t(time): string => {\n\t\t\tconst day = String(time.getDate());\n\t\t\tif (day !== '11' && day.endsWith('1')) return `${day}st`;\n\t\t\tif (day !== '12' && day.endsWith('2')) return `${day}nd`;\n\t\t\tif (day !== '13' && day.endsWith('3')) return `${day}rd`;\n\t\t\treturn `${day}th`;\n\t\t}\n\t],\n\t['dd', (time): string => days[time.getDay()].slice(0, 2)],\n\t['ddd', (time): string => days[time.getDay()].slice(0, 3)],\n\t['dddd', (time): string => days[time.getDay()]],\n\t['X', (time): string => String(time.valueOf() / second)],\n\t['x', (time): string => String(time.valueOf())],\n\n\t// Locales\n\t['H', (time): string => String(time.getHours())],\n\t['HH', (time): string => String(time.getHours()).padStart(2, '0')],\n\t['h', (time): string => String(time.getHours() % 12 || 12)],\n\t['hh', (time): string => String(time.getHours() % 12 || 12).padStart(2, '0')],\n\t['a', (time): string => (time.getHours() < 12 ? 'am' : 'pm')],\n\t['A', (time): string => (time.getHours() < 12 ? 'AM' : 'PM')],\n\t['m', (time): string => String(time.getMinutes())],\n\t['mm', (time): string => String(time.getMinutes()).padStart(2, '0')],\n\t['s', (time): string => String(time.getSeconds())],\n\t['ss', (time): string => String(time.getSeconds()).padStart(2, '0')],\n\t['S', (time): string => String(time.getMilliseconds())],\n\t['SS', (time): string => String(time.getMilliseconds()).padStart(2, '0')],\n\t['SSS', (time): string => String(time.getMilliseconds()).padStart(3, '0')],\n\t[\n\t\t'T',\n\t\t(time): string => `${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t't',\n\t\t(time): string =>\n\t\t\t`${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')}:${String(time.getSeconds()).padStart(2, '0')} ${\n\t\t\t\ttime.getHours() < 12 ? 'am' : 'pm'\n\t\t\t}`\n\t],\n\t[\n\t\t'L',\n\t\t(time): string => `${String(time.getMonth() + 1).padStart(2, '0')}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`\n\t],\n\t['l', (time): string => `${String(time.getMonth() + 1)}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['LL', (time): string => `${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t['ll', (time): string => `${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t[\n\t\t'LLL',\n\t\t(time): string =>\n\t\t\t`${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'lll',\n\t\t(time): string =>\n\t\t\t`${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'LLLL',\n\t\t(time): string =>\n\t\t\t`${days[time.getDay()]}, ${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'llll',\n\t\t(time): string =>\n\t\t\t`${days[time.getDay()].slice(0, 3)} ${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(\n\t\t\t\ttime.getFullYear()\n\t\t\t)} ${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'Z',\n\t\t(time): string => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t],\n\t[\n\t\t'ZZ',\n\t\t(time): string => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t]\n]);\n/* eslint-enable max-len */\n\nexport type TimeResolvable = Date | number | string;\n\nexport interface TimestampTemplateEntry {\n\ttype: string;\n\tcontent: string | null;\n}\n\n/**\n * Klasa's Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.\n */\nexport class Timestamp {\n\t/**\n\t * The raw pattern\n\t * @since 0.0.1\n\t */\n\tpublic pattern: string;\n\n\t/**\n\t * @since 0.0.1\n\t */\n\tprivate template: TimestampTemplateEntry[];\n\n\t/**\n\t * Starts a new Timestamp and parses the pattern.\n\t * @since 0.0.1\n\t * @param pattern The pattern to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 0.0.1\n\t * @param time The time to display\n\t */\n\tpublic display(time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(this.template, time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 0.0.1\n\t * @param time The time to display in utc\n\t */\n\tpublic displayUTC(time: TimeResolvable): string {\n\t\treturn Timestamp.display(this.template, Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Edits the current pattern.\n\t * @since 0.0.1\n\t * @param pattern The new pattern for this instance\n\t * @chainable\n\t */\n\tpublic edit(pattern: string): this {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Defines the toString behavior of Timestamp.\n\t */\n\tpublic toString(): string {\n\t\treturn this.display();\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 0.0.1\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 0.0.1\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayUTCArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Creates a UTC Date object to work with.\n\t * @since 0.0.1\n\t * @param time The date to convert to utc\n\t */\n\tpublic static utc(time: Date | number | string = new Date()): Date {\n\t\ttime = Timestamp.resolveDate(time);\n\t\treturn new Date(time.valueOf() + time.getTimezoneOffset() * 60000);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 0.0.1\n\t * @param template The pattern to parse\n\t * @param time The time to display\n\t */\n\tprivate static display(template: TimestampTemplateEntry[], time: Date | number | string): string {\n\t\tlet output = '';\n\t\tconst parsedTime = Timestamp.resolveDate(time);\n\t\tfor (const { content, type } of template) output += content || tokenResolvers.get(type)!(parsedTime);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Parses the pattern.\n\t * @since 0.0.1\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): TimestampTemplateEntry[] {\n\t\tconst template: TimestampTemplateEntry[] = [];\n\t\tfor (let i = 0; i < pattern.length; i++) {\n\t\t\tlet current = '';\n\t\t\tconst currentChar = pattern[i];\n\t\t\tconst tokenMax = tokens.get(currentChar);\n\t\t\tif (typeof tokenMax === 'number') {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (pattern[i + 1] === currentChar && current.length < tokenMax) current += pattern[++i];\n\t\t\t\ttemplate.push({ type: current, content: null });\n\t\t\t} else if (currentChar === '[') {\n\t\t\t\twhile (i + 1 < pattern.length && pattern[i + 1] !== ']') current += pattern[++i];\n\t\t\t\ti++;\n\t\t\t\ttemplate.push({ type: 'literal', content: current || '[' });\n\t\t\t} else {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (i + 1 < pattern.length && !tokens.has(pattern[i + 1]) && pattern[i + 1] !== '[') current += pattern[++i];\n\t\t\t\ttemplate.push({ type: 'literal', content: current });\n\t\t\t}\n\t\t}\n\n\t\treturn template;\n\t}\n\n\t/**\n\t * Resolves a date.\n\t * @since 0.0.1\n\t * @param time The time to parse\n\t */\n\tprivate static resolveDate(time: TimeResolvable): Date {\n\t\treturn time instanceof Date ? time : new Date(time);\n\t}\n}\n"],"names":["day","hour","days","months","tokens","Map","second","minute","tokenResolvers","time","String","getFullYear","slice","getMonth","padStart","getDate","Math","floor","getTime","Date","endsWith","getDay","valueOf","getHours","getMinutes","getSeconds","getMilliseconds","offset","getTimezoneOffset","unsigned","absolute","abs","Timestamp","[object Object]","pattern","this","template","parse","display","utc","resolveDate","output","parsedTime","content","type","get","i","length","current","currentChar","tokenMax","push","has"],"mappings":"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"}